import nodemailer from 'nodemailer';

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—Å—ñ SMTP –∫—Ä–µ–¥–µ–Ω—à–∏–ª–∏
const smtpHost = process.env.SMTP_HOST;
const smtpPort = process.env.SMTP_PORT;
const smtpUser = process.env.SMTP_USER;
const smtpPassword = process.env.SMTP_PASSWORD;
const smtpFrom = process.env.SMTP_FROM;
const appDomain = process.env.APP_DOMAIN;

let transporter = null;

if (smtpHost && smtpPort && smtpUser && smtpPassword) {
  transporter = nodemailer.createTransport({
    host: smtpHost,
    port: parseInt(smtpPort),
    secure: parseInt(smtpPort) === 465, // true for 465, false for 587/others
    auth: {
      user: smtpUser,
      pass: smtpPassword,
    },
    connectionTimeout: 10000, // 10s
    greetingTimeout: 10000, // 10s
    socketTimeout: 10000, // 10s
    tls: { rejectUnauthorized: false },
  });
  console.log('SMTP transporter configured successfully');
} else {
  console.log('SMTP not configured - missing credentials');
}

export const sendResetPasswordEmail = async (to, token) => {
  const resetLink = `${
    appDomain || 'http://localhost:3000'
  }/reset-password?token=${token}`;

  // –Ø–∫—â–æ SMTP –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ª–æ–≥—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
  if (!transporter || !smtpFrom || !appDomain) {
    console.warn('‚ö†Ô∏è  SMTP not configured - DEV MODE');
    console.log('üìß Password reset link:', resetLink);
    console.log('üìß Would send to:', to);
    return; // Success –≤ dev —Ä–µ–∂–∏–º—ñ
  }

  const mailOptions = {
    from: smtpFrom,
    to,
    subject: 'Reset Your Password',
    html: `
      <h1>Password Reset Request</h1>
      <p>You have requested to reset your password. Click the link below to reset it:</p>
      <a href="${resetLink}">Reset Password</a>
      <p>This link will expire in 5 minutes.</p>
      <p>If you didn't request this, please ignore this email.</p>
    `,
  };

  // fail-fast –∑–∞—Ö–∏—Å—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∑–∞–≤–∏—Å–∞–Ω—å SMTP
  const sendMailWithTimeout = async options => {
    return await Promise.race([
      transporter.sendMail(options),
      new Promise((_, reject) =>
        setTimeout(() => reject(new Error('SMTP timeout')), 12000)
      ),
    ]);
  };

  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
    try {
      await transporter.verify();
      console.log('‚úÖ SMTP connection verified successfully');
    } catch (verifyError) {
      // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
      if (
        verifyError.code === 'EAUTH' ||
        verifyError.message?.includes('Authentication failed')
      ) {
        console.warn('‚ö†Ô∏è  SMTP auth failed - using fallback mode');
        console.log('üìß Password reset link:', resetLink);
        console.log(
          'üìß To fix: Create SMTP key at https://app.brevo.com -> SMTP & API -> SMTP'
        );
        return; // Success –≤ fallback —Ä–µ–∂–∏–º—ñ
      }
      throw verifyError; // –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ –∫–∏–¥–∞—î–º–æ –¥–∞–ª—ñ
    }

    await sendMailWithTimeout(mailOptions);
    console.log('‚úÖ Email sent successfully to:', to);
  } catch (e) {
    console.error('‚ùå Error sending email:', e?.message || e);
    console.log('üìß Debug - reset link:', resetLink);
    throw new Error('Failed to send email');
  }
};
